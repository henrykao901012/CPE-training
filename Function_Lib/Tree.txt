class binary_tree
{
private:
    void deep_count_function_only_call_by_deep(binary_tree *, int &, int = 0);
    void find_pos_data_function_only_call_by_del(binary_tree *, binary_tree **&, string);

public:
    string str;
    binary_tree *left, *right;
    binary_tree(string get_str = "", binary_tree *lpos = 0, binary_tree *rpos = 0) : str(get_str), left(lpos), right(rpos) {}

    static void insert(binary_tree *&, string, string);
    static void insert(binary_tree *&, string);

    static void del(binary_tree *&, string);

    static void preorder(binary_tree *);
    static void inorder(binary_tree *);
    static void postorder(binary_tree *);

    static int deep(binary_tree *);
};

void binary_tree::find_pos_data_function_only_call_by_del(binary_tree *start, binary_tree **&pos, string s)
{
    if (pos || !start)
        return;
    if (start->str == s)
    {
        pos = &start;
        return;
    }
    if (start->left && start->left->str == s)
        pos = &start->left;

    if (start->right && start->right->str == s)
        pos = &start->right;

    find_pos_data_function_only_call_by_del(start->left, pos, s);
    find_pos_data_function_only_call_by_del(start->right, pos, s);
}

void binary_tree::del(binary_tree *&start, string s)
{
    binary_tree **pre_pos_pointer = 0;
    find_pos_data_function_only_call_by_del(start, pre_pos_pointer, s);
    if (!pre_pos_pointer)
        throw "no " + s;

    if ((*pre_pos_pointer)->left && (*pre_pos_pointer)->right)
    {
        binary_tree **find_pre_max = &(*pre_pos_pointer)->left;
        while ((*find_pre_max)->right)
            find_pre_max = &(*find_pre_max)->right;
        (*pre_pos_pointer)->str = (*find_pre_max)->str;
        binary_tree *ready_to_del = *find_pre_max;
        *find_pre_max = (*find_pre_max)->left;
        delete ready_to_del;
    }
    else
    {
        binary_tree *ready_to_del = *pre_pos_pointer;
        *pre_pos_pointer = ready_to_del->left ? ready_to_del->left : (ready_to_del->right ? ready_to_del->right : 0);
        delete ready_to_del;
    }
}

void binary_tree::insert(binary_tree *&start, string add)
{
    if (!start)
    {
        start = new binary_tree(add);
        return;
    }
    binary_tree **get = stoi(add) > stoi(start->str) ? &start->right : &start->left;
    if (!*get)
    {
        *get = new binary_tree(add);
        return;
    }
    insert(*get, add);
}

void binary_tree::insert(binary_tree *&start, string root, string add)
{
    if (!start)
        return;
    if (start->str == root)
    {
        (add[2] % 2 ? start->left : start->right) = new binary_tree(add);
        return;
    }
    if (start)
    {
        insert(start->left, root, add);
        insert(start->right, root, add);
    }
}

void binary_tree::preorder(binary_tree *start)
{
    if (start)
    {
        cout << start->str << " ";
        preorder(start->left);
        preorder(start->right);
    }
}

void binary_tree::inorder(binary_tree *start)
{
    if (start)
    {
        inorder(start->left);
        cout << start->str << " ";
        inorder(start->right);
    }
}

void binary_tree::postorder(binary_tree *start)
{
    if (start)
    {
        postorder(start->left);
        postorder(start->right);
        cout << start->str << " ";
    }
}

void binary_tree::deep_count_function_only_call_by_deep(binary_tree *start, int &max, int deep)
{
    //static int max = 0;
    //deep++;
    if (start)
    {
        //cout << start->str << " count = " << count << "\n";
        max = deep > max ? deep : max;
        deep_count_function_only_call_by_deep(start->left, max, deep + 1);
        deep_count_function_only_call_by_deep(start->right, max, deep + 1);
    }
    //deep--;
}

int binary_tree::deep(binary_tree *start)
{
    int max = 0;
    deep_count_function_only_call_by_deep(start, max);
    return max;
}